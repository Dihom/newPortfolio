"use strict";

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

var _ = Object.defineProperty;
var w = Object.getOwnPropertySymbols;
var X = Object.prototype.hasOwnProperty,
    Z = Object.prototype.propertyIsEnumerable;

var E = function E(p, b, g) {
  return b in p ? _(p, b, {
    enumerable: !0,
    configurable: !0,
    writable: !0,
    value: g
  }) : p[b] = g;
},
    L = function L(p, b) {
  for (var g in b || (b = {})) {
    X.call(b, g) && E(p, g, b[g]);
  }

  if (w) {
    var _iterator = _createForOfIteratorHelper(w(b)),
        _step;

    try {
      for (_iterator.s(); !(_step = _iterator.n()).done;) {
        var g = _step.value;
        Z.call(b, g) && E(p, g, b[g]);
      }
    } catch (err) {
      _iterator.e(err);
    } finally {
      _iterator.f();
    }
  }

  return p;
};

var u = function u(p, b, g) {
  return E(p, _typeof(b) != "symbol" ? b + "" : b, g), g;
};

(function (p, b) {
  (typeof exports === "undefined" ? "undefined" : _typeof(exports)) == "object" && typeof module != "undefined" ? module.exports = b() : typeof define == "function" && define.amd ? define(b) : (p = typeof globalThis != "undefined" ? globalThis : p || self, p.JustValidate = b());
})(void 0, function () {
  "use strict";

  var p = /^(([^<>()[\]\\.,;:\s@"]+(\.[^<>()[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/,
      b = /^[0-9]+$/,
      g = /^(?=.*[A-Za-z])(?=.*\d)[A-Za-z\d]{8,}$/,
      x = /^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[@$!%*?&])[A-Za-z\d@$!%*?&]{8,}$/,
      I = function I(n) {
    var e = n;
    return typeof n == "string" && (e = n.trim()), !e;
  },
      T = function T(n) {
    return p.test(n);
  },
      $ = function $(n, e) {
    return n.length > e;
  },
      M = function M(n, e) {
    return n.length < e;
  },
      V = function V(n) {
    return b.test(n);
  },
      P = function P(n) {
    return g.test(n);
  },
      j = function j(n) {
    return x.test(n);
  },
      G = function G(n, e) {
    return n > e;
  },
      A = function A(n, e) {
    return n < e;
  };

  var d;

  (function (n) {
    n.Required = "required", n.Email = "email", n.MinLength = "minLength", n.MaxLength = "maxLength", n.Password = "password", n.Number = "number", n.MaxNumber = "maxNumber", n.MinNumber = "minNumber", n.StrongPassword = "strongPassword", n.CustomRegexp = "customRegexp", n.MinFilesCount = "minFilesCount", n.MaxFilesCount = "maxFilesCount", n.Files = "files";
  })(d || (d = {}));

  var y;

  (function (n) {
    n.Required = "required";
  })(y || (y = {}));

  var k;

  (function (n) {
    n.Label = "label", n.LabelArrow = "labelArrow";
  })(k || (k = {}));

  var N = function N(n, e) {
    switch (n) {
      case d.Required:
        return "The field is required";

      case d.Email:
        return "Email has invalid format";

      case d.MaxLength:
        return "The field must contain a maximum of :value characters".replace(":value", String(e));

      case d.MinLength:
        return "The field must contain a minimum of :value characters".replace(":value", String(e));

      case d.Password:
        return "Password must contain minimum eight characters, at least one letter and one number";

      case d.Number:
        return "Value should be a number";

      case d.StrongPassword:
        return "Password should contain minimum eight characters, at least one uppercase letter, one lowercase letter, one number and one special character";

      case d.MaxNumber:
        return "Number should be less or equal than :value".replace(":value", String(e));

      case d.MinNumber:
        return "Number should be more or equal than :value".replace(":value", String(e));

      case d.MinFilesCount:
        return "Files count should be more or equal than :value".replace(":value", String(e));

      case d.MaxFilesCount:
        return "Files count should be less or equal than :value".replace(":value", String(e));

      case d.Files:
        return "Uploaded files have one or several invalid properties (extension/size/type etc)";

      default:
        return "Value is incorrect";
    }
  },
      q = function q(n) {
    switch (n) {
      case y.Required:
        return "The field is required";

      default:
        return "Group is incorrect";
    }
  },
      F = function F(n) {
    return !!n && typeof n.then == "function";
  },
      z = ".just-validate-error-label[data-tooltip=true]{position:fixed;padding:4px 8px;background:#423f3f;color:#fff;white-space:nowrap;z-index:10;border-radius:4px;transform:translateY(-5px)}.just-validate-error-label[data-tooltip=true]:before{content:'';width:0;height:0;border-left:solid 5px transparent;border-right:solid 5px transparent;border-bottom:solid 5px #423f3f;position:absolute;z-index:3;display:block;bottom:-5px;transform:rotate(180deg);left:calc(50% - 5px)}.just-validate-error-label[data-tooltip=true][data-direction=left]{transform:translateX(-5px)}.just-validate-error-label[data-tooltip=true][data-direction=left]:before{right:-7px;bottom:auto;left:auto;top:calc(50% - 2px);transform:rotate(90deg)}.just-validate-error-label[data-tooltip=true][data-direction=right]{transform:translateX(5px)}.just-validate-error-label[data-tooltip=true][data-direction=right]:before{right:auto;bottom:auto;left:-7px;top:calc(50% - 2px);transform:rotate(-90deg)}.just-validate-error-label[data-tooltip=true][data-direction=bottom]{transform:translateY(5px)}.just-validate-error-label[data-tooltip=true][data-direction=bottom]:before{right:auto;bottom:auto;left:calc(50% - 5px);top:-5px;transform:rotate(0)}",
      C = 5,
      S = {
    errorFieldStyle: {
      color: "#b81111",
      border: "1px solid #B81111"
    },
    errorFieldCssClass: "just-validate-error-field",
    successFieldCssClass: "just-validate-success-field",
    errorLabelStyle: {
      color: "#b81111"
    },
    errorLabelCssClass: "just-validate-error-label",
    successLabelCssClass: "just-validate-success-label",
    focusInvalidField: !0,
    lockForm: !0,
    testingMode: !1
  };

  var O = /*#__PURE__*/function () {
    function O(e, t, s) {
      var _this = this;

      _classCallCheck(this, O);

      u(this, "form", null);
      u(this, "fields", {});
      u(this, "groupFields", {});
      u(this, "errors", {});
      u(this, "isValid", !1);
      u(this, "isSubmitted", !1);
      u(this, "globalConfig", S);
      u(this, "errorLabels", []);
      u(this, "successLabels", []);
      u(this, "eventListeners", []);
      u(this, "dictLocale", []);
      u(this, "currentLocale");
      u(this, "customStyleTags", {});
      u(this, "onSuccessCallback");
      u(this, "onFailCallback");
      u(this, "tooltips", []);
      u(this, "lastScrollPosition");
      u(this, "isScrollTick");
      u(this, "refreshAllTooltips", function () {
        _this.tooltips.forEach(function (e) {
          e.refresh();
        });
      });
      u(this, "handleDocumentScroll", function () {
        _this.lastScrollPosition = window.scrollY, _this.isScrollTick || (window.requestAnimationFrame(function () {
          _this.refreshAllTooltips(), _this.isScrollTick = !1;
        }), _this.isScrollTick = !0);
      });
      u(this, "formSubmitHandler", function (e) {
        e.preventDefault(), _this.isSubmitted = !0, _this.globalConfig.lockForm && _this.lockForm(), _this.validate().finally(function () {
          var t, s;
          _this.globalConfig.lockForm && _this.unlockForm(), _this.isValid ? (t = _this.onSuccessCallback) == null || t.call(_this, e) : (s = _this.onFailCallback) == null || s.call(_this, _this.fields);
        });
      });
      u(this, "handleFieldChange", function (e) {
        var t, s;

        for (var i in _this.fields) {
          var r = _this.fields[i];

          if (r.elem === e) {
            t = r, s = i;
            break;
          }
        }

        !t || !s || _this.validateField(s, t, !0);
      });
      u(this, "handleGroupChange", function (e) {
        var t, s;

        for (var i in _this.groupFields) {
          var r = _this.groupFields[i];

          if (r.elems.find(function (a) {
            return a === e;
          })) {
            t = r, s = i;
            break;
          }
        }

        !t || !s || _this.validateGroup(s, t);
      });
      u(this, "handlerChange", function (e) {
        !e.target || (_this.handleFieldChange(e.target), _this.handleGroupChange(e.target), _this.renderErrors());
      });
      this.initialize(e, t, s);
    }

    _createClass(O, [{
      key: "initialize",
      value: function initialize(e, t, s) {
        if (this.form = null, this.errors = {}, this.isValid = !1, this.isSubmitted = !1, this.globalConfig = S, this.errorLabels = [], this.eventListeners = [], this.customStyleTags = {}, this.tooltips = [], typeof e == "string") {
          var i = document.querySelector(e);
          if (!i) throw Error("Form with ".concat(e, " selector not found! Please check the form selector"));
          this.setForm(i);
        } else if (e instanceof HTMLFormElement) this.setForm(e);else throw Error("Form selector is not valid. Please specify a string selector or a DOM element.");

        if (this.globalConfig = L(L({}, S), t), s && (this.dictLocale = s), this.isTooltip()) {
          var _i = document.createElement("style");

          _i.textContent = z, this.customStyleTags[k.Label] = document.head.appendChild(_i), this.addListener("scroll", document, this.handleDocumentScroll);
        }
      }
    }, {
      key: "getLocalisedString",
      value: function getLocalisedString(e) {
        var s;
        return !this.currentLocale || !this.dictLocale.length ? e : ((s = this.dictLocale.find(function (i) {
          return i.key === e;
        })) == null ? void 0 : s.dict[this.currentLocale]) || e;
      }
    }, {
      key: "getFieldErrorMessage",
      value: function getFieldErrorMessage(e, t) {
        var s = typeof e.errorMessage == "function" ? e.errorMessage(this.getElemValue(t), this.fields) : e.errorMessage;
        return this.getLocalisedString(s) || N(e.rule, e.value);
      }
    }, {
      key: "getFieldSuccessMessage",
      value: function getFieldSuccessMessage(e, t) {
        var s = typeof e == "function" ? e(this.getElemValue(t), this.fields) : e;
        return this.getLocalisedString(s);
      }
    }, {
      key: "getGroupErrorMessage",
      value: function getGroupErrorMessage(e) {
        return this.getLocalisedString(e.errorMessage) || q(e.rule);
      }
    }, {
      key: "getGroupSuccessMessage",
      value: function getGroupSuccessMessage(e) {
        return this.getLocalisedString(e.successMessage);
      }
    }, {
      key: "setFieldInvalid",
      value: function setFieldInvalid(e, t) {
        this.fields[e].isValid = !1, this.fields[e].errorMessage = this.getFieldErrorMessage(t, this.fields[e].elem);
      }
    }, {
      key: "setFieldValid",
      value: function setFieldValid(e, t) {
        this.fields[e].isValid = !0, t !== void 0 && (this.fields[e].successMessage = this.getFieldSuccessMessage(t, this.fields[e].elem));
      }
    }, {
      key: "setGroupInvalid",
      value: function setGroupInvalid(e, t) {
        this.groupFields[e].isValid = !1, this.groupFields[e].errorMessage = this.getGroupErrorMessage(t);
      }
    }, {
      key: "setGroupValid",
      value: function setGroupValid(e, t) {
        this.groupFields[e].isValid = !0, this.groupFields[e].successMessage = this.getGroupSuccessMessage(t);
      }
    }, {
      key: "getElemValue",
      value: function getElemValue(e) {
        switch (e.type) {
          case "checkbox":
            return e.checked;

          case "file":
            return e.files;

          default:
            return e.value;
        }
      }
    }, {
      key: "validateGroupRule",
      value: function validateGroupRule(e, t, s, i) {
        switch (i.rule) {
          case y.Required:
            (t === "radio" || t === "checkbox") && (s.every(function (r) {
              return !r.checked;
            }) ? this.setGroupInvalid(e, i) : this.setGroupValid(e, i));
        }
      }
    }, {
      key: "validateFieldRule",
      value: function validateFieldRule(e, t, s) {
        var _this2 = this;

        var i = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : !1;
        var r = s.value,
            a = this.getElemValue(t);

        if (s.plugin) {
          s.plugin(a, this.fields) || this.setFieldInvalid(e, s);
          return;
        }

        switch (s.rule) {
          case d.Required:
            {
              I(a) && this.setFieldInvalid(e, s);
              break;
            }

          case d.Email:
            {
              if (typeof a != "string") {
                this.setFieldInvalid(e, s);
                break;
              }

              T(a) || this.setFieldInvalid(e, s);
              break;
            }

          case d.MaxLength:
            {
              if (r === void 0) {
                console.error("Value for ".concat(s.rule, " rule for [").concat(e, "] field is not defined. The field will be always invalid.")), this.setFieldInvalid(e, s);
                break;
              }

              if (typeof r != "number") {
                console.error("Value for ".concat(s.rule, " rule for [").concat(e, "] should be a number. The field will be always invalid.")), this.setFieldInvalid(e, s);
                break;
              }

              if (typeof a != "string") {
                this.setFieldInvalid(e, s);
                break;
              }

              if (a === "") break;
              $(a, r) && this.setFieldInvalid(e, s);
              break;
            }

          case d.MinLength:
            {
              if (r === void 0) {
                console.error("Value for ".concat(s.rule, " rule for [").concat(e, "] field is not defined. The field will be always invalid.")), this.setFieldInvalid(e, s);
                break;
              }

              if (typeof r != "number") {
                console.error("Value for ".concat(s.rule, " rule for [").concat(e, "] should be a number. The field will be always invalid.")), this.setFieldInvalid(e, s);
                break;
              }

              if (typeof a != "string") {
                this.setFieldInvalid(e, s);
                break;
              }

              if (a === "") break;
              M(a, r) && this.setFieldInvalid(e, s);
              break;
            }

          case d.Password:
            {
              if (typeof a != "string") {
                this.setFieldInvalid(e, s);
                break;
              }

              if (a === "") break;
              P(a) || this.setFieldInvalid(e, s);
              break;
            }

          case d.StrongPassword:
            {
              if (typeof a != "string") {
                this.setFieldInvalid(e, s);
                break;
              }

              if (a === "") break;
              j(a) || this.setFieldInvalid(e, s);
              break;
            }

          case d.Number:
            {
              if (typeof a != "string") {
                this.setFieldInvalid(e, s);
                break;
              }

              if (a === "") break;
              V(a) || this.setFieldInvalid(e, s);
              break;
            }

          case d.MaxNumber:
            {
              if (r === void 0) {
                console.error("Value for ".concat(s.rule, " rule for [").concat(e, "] field is not defined. The field will be always invalid.")), this.setFieldInvalid(e, s);
                break;
              }

              if (typeof r != "number") {
                console.error("Value for ".concat(s.rule, " rule for [").concat(e, "] field should be a number. The field will be always invalid.")), this.setFieldInvalid(e, s);
                break;
              }

              if (typeof a != "string") {
                this.setFieldInvalid(e, s);
                break;
              }

              if (a === "") break;
              var l = +a;
              (Number.isNaN(l) || G(l, r)) && this.setFieldInvalid(e, s);
              break;
            }

          case d.MinNumber:
            {
              if (r === void 0) {
                console.error("Value for ".concat(s.rule, " rule for [").concat(e, "] field is not defined. The field will be always invalid.")), this.setFieldInvalid(e, s);
                break;
              }

              if (typeof r != "number") {
                console.error("Value for ".concat(s.rule, " rule for [").concat(e, "] field should be a number. The field will be always invalid.")), this.setFieldInvalid(e, s);
                break;
              }

              if (typeof a != "string") {
                this.setFieldInvalid(e, s);
                break;
              }

              if (a === "") break;

              var _l = +a;

              (Number.isNaN(_l) || A(_l, r)) && this.setFieldInvalid(e, s);
              break;
            }

          case d.CustomRegexp:
            {
              if (r === void 0) {
                console.error("Value for ".concat(s.rule, " rule for [").concat(e, "] field is not defined. This field will be always invalid.")), this.setFieldInvalid(e, s);
                return;
              }

              var _l2;

              try {
                _l2 = new RegExp(r);
              } catch (_unused) {
                console.error("Value for ".concat(s.rule, " rule for [").concat(e, "] should be a valid regexp. This field will be always invalid.")), this.setFieldInvalid(e, s);
                break;
              }

              var o = String(a);
              o !== "" && !_l2.test(o) && this.setFieldInvalid(e, s);
              break;
            }

          case d.MinFilesCount:
            {
              if (r === void 0) {
                console.error("Value for ".concat(s.rule, " rule for [").concat(e, "] field is not defined. This field will be always invalid.")), this.setFieldInvalid(e, s);
                break;
              }

              if (typeof r != "number") {
                console.error("Value for ".concat(s.rule, " rule for [").concat(e, "] field should be a number. The field will be always invalid.")), this.setFieldInvalid(e, s);
                break;
              }

              if (Number.isFinite(a == null ? void 0 : a.length) && a.length < r) {
                this.setFieldInvalid(e, s);
                break;
              }

              break;
            }

          case d.MaxFilesCount:
            {
              if (r === void 0) {
                console.error("Value for ".concat(s.rule, " rule for [").concat(e, "] field is not defined. This field will be always invalid.")), this.setFieldInvalid(e, s);
                break;
              }

              if (typeof r != "number") {
                console.error("Value for ".concat(s.rule, " rule for [").concat(e, "] field should be a number. The field will be always invalid.")), this.setFieldInvalid(e, s);
                break;
              }

              if (Number.isFinite(a == null ? void 0 : a.length) && a.length > r) {
                this.setFieldInvalid(e, s);
                break;
              }

              break;
            }

          case d.Files:
            {
              if (r === void 0) {
                console.error("Value for ".concat(s.rule, " rule for [").concat(e, "] field is not defined. This field will be always invalid.")), this.setFieldInvalid(e, s);
                return;
              }

              if (_typeof(r) != "object") {
                console.error("Value for ".concat(s.rule, " rule for [").concat(e, "] field should be an object. This field will be always invalid.")), this.setFieldInvalid(e, s);
                return;
              }

              var _l3 = r.files;

              if (_typeof(_l3) != "object") {
                console.error("Value for ".concat(s.rule, " rule for [").concat(e, "] field should be an object with files array. This field will be always invalid.")), this.setFieldInvalid(e, s);
                return;
              }

              var _o = function _o(c, h) {
                var f = Number.isFinite(h.minSize) && c.size < h.minSize,
                    m = Number.isFinite(h.maxSize) && c.size > h.maxSize,
                    v = Array.isArray(h.names) && !h.names.includes(c.name),
                    D = Array.isArray(h.extensions) && !h.extensions.includes(c.name.split(".")[c.name.split(".").length - 1]),
                    H = Array.isArray(h.types) && !h.types.includes(c.type);
                return f || m || v || D || H;
              };

              if (_typeof(a) == "object" && a !== null) for (var c = 0, h = a.length; c < h; ++c) {
                var f = a.item(c);

                if (!f) {
                  this.setFieldInvalid(e, s);
                  break;
                }

                if (_o(f, _l3)) {
                  this.setFieldInvalid(e, s);
                  break;
                }
              }
              break;
            }

          default:
            {
              if (typeof s.validator != "function") {
                console.error("Validator for custom rule for [".concat(e, "] field should be a function. This field will be always invalid.")), this.setFieldInvalid(e, s);
                return;
              }

              var _l4 = s.validator(a, this.fields);

              if (typeof _l4 != "boolean" && typeof _l4 != "function" && console.error("Validator return value for [".concat(e, "] field should be boolean or function. It will be cast to boolean.")), typeof _l4 == "function") if (i) this.fields[e].asyncCheckPending = !0;else {
                this.fields[e].asyncCheckPending = !1;

                var _o2 = _l4();

                if (!F(_o2)) {
                  console.error("Validator function for custom rule for [".concat(e, "] field should return a Promise. This field will be always invalid.")), this.setFieldInvalid(e, s);
                  return;
                }

                return _o2.then(function (c) {
                  c || _this2.setFieldInvalid(e, s);
                }).catch(function () {
                  _this2.setFieldInvalid(e, s);
                });
              }
              _l4 || this.setFieldInvalid(e, s);
            }
        }
      }
    }, {
      key: "validateField",
      value: function validateField(e, t) {
        var _this3 = this;

        var s = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : !1;
        var r;
        t.isValid = !0;
        var i = [];
        return _toConsumableArray(t.rules).reverse().forEach(function (a) {
          var l = _this3.validateFieldRule(e, t.elem, a, s);

          F(l) && i.push(l);
        }), t.isValid && this.setFieldValid(e, (r = t.config) == null ? void 0 : r.successMessage), Promise.allSettled(i);
      }
    }, {
      key: "validateGroup",
      value: function validateGroup(e, t) {
        var _this4 = this;

        var s = [];
        return _toConsumableArray(t.rules).reverse().forEach(function (i) {
          var r = _this4.validateGroupRule(e, t.type, t.elems, i);

          F(r) && s.push(r);
        }), Promise.allSettled(s);
      }
    }, {
      key: "focusInvalidField",
      value: function focusInvalidField() {
        var _this5 = this;

        var _loop = function _loop(e) {
          var t = _this5.fields[e];

          if (!t.isValid) {
            setTimeout(function () {
              return t.elem.focus();
            }, 0);
            return "break";
          }
        };

        for (var e in this.fields) {
          var _ret = _loop(e);

          if (_ret === "break") break;
        }
      }
    }, {
      key: "afterSubmitValidation",
      value: function afterSubmitValidation() {
        this.renderErrors(), this.globalConfig.focusInvalidField && this.focusInvalidField();
      }
    }, {
      key: "validate",
      value: function validate() {
        var _this6 = this;

        return new Promise(function (e) {
          var t = [];
          Object.keys(_this6.fields).forEach(function (s) {
            var i = _this6.fields[s],
                r = _this6.validateField(s, i);

            F(r) && t.push(r);
          }), Object.keys(_this6.groupFields).forEach(function (s) {
            var i = _this6.groupFields[s],
                r = _this6.validateGroup(s, i);

            F(r) && t.push(r);
          }), t.length ? Promise.allSettled(t).then(function () {
            _this6.afterSubmitValidation(), e(!0);
          }) : (_this6.afterSubmitValidation(), e(!1));
        });
      }
    }, {
      key: "setForm",
      value: function setForm(e) {
        this.form = e, this.form.setAttribute("novalidate", "novalidate"), this.removeListener("submit", this.form, this.formSubmitHandler), this.addListener("submit", this.form, this.formSubmitHandler);
      }
    }, {
      key: "addListener",
      value: function addListener(e, t, s) {
        t.addEventListener(e, s), this.eventListeners.push({
          type: e,
          elem: t,
          func: s
        });
      }
    }, {
      key: "removeListener",
      value: function removeListener(e, t, s) {
        t.removeEventListener(e, s), this.eventListeners = this.eventListeners.filter(function (i) {
          return i.type !== e || i.elem !== t;
        });
      }
    }, {
      key: "addField",
      value: function addField(e, t, s) {
        if (typeof e != "string") throw Error("Field selector is not valid. Please specify a string selector.");
        var i = document.querySelector(e);
        if (!i) throw Error("Field with ".concat(e, " selector not found! Please check the field selector."));
        if (!Array.isArray(t) || !t.length) throw Error("Rules argument for the field [".concat(e, "] should be an array and should contain at least 1 element."));
        return t.forEach(function (r) {
          if (!("rule" in r || "validator" in r || "plugin" in r)) throw Error("Rules argument for the field [".concat(e, "] must contain at least one rule or validator property."));
          if (!r.validator && !r.plugin && (!r.rule || !Object.values(d).includes(r.rule))) throw Error("Rule should be one of these types: ".concat(Object.values(d).join(", "), ". Provided value: ").concat(r.rule));
        }), this.fields[e] = {
          elem: i,
          rules: t,
          isValid: void 0,
          config: s
        }, this.setListeners(i), this.isSubmitted && this.validate(), this;
      }
    }, {
      key: "removeField",
      value: function removeField(e) {
        if (typeof e != "string") throw Error("Field selector is not valid. Please specify a string selector.");
        if (!this.fields[e]) return console.error("Field not found. Check the field selector."), this;
        var t = this.getListenerType(this.fields[e].elem.type);
        return this.removeListener(t, this.fields[e].elem, this.handlerChange), this.clearErrors(), delete this.fields[e], this;
      }
    }, {
      key: "removeGroup",
      value: function removeGroup(e) {
        var _this7 = this;

        if (typeof e != "string") throw Error("Group selector is not valid. Please specify a string selector.");
        return this.groupFields[e] ? (this.groupFields[e].elems.forEach(function (t) {
          var s = _this7.getListenerType(t.type);

          _this7.removeListener(s, t, _this7.handlerChange);
        }), this.clearErrors(), delete this.groupFields[e], this) : (console.error("Group not found. Check the group selector."), this);
      }
    }, {
      key: "addRequiredGroup",
      value: function addRequiredGroup(e, t, s, i) {
        var _this8 = this;

        if (typeof e != "string") throw Error("Group selector is not valid. Please specify a string selector.");
        var r = document.querySelector(e);
        if (!r) throw Error("Group with ".concat(e, " selector not found! Please check the group selector."));
        var a = r.querySelectorAll("input"),
            l = Array.from(a).every(function (c) {
          return c.type === "radio";
        }),
            o = Array.from(a).every(function (c) {
          return c.type === "checkbox";
        });
        if (!l && !o) throw Error("Group should contain either or checkboxes or radio buttons");
        return this.groupFields[e] = {
          rules: [{
            rule: y.Required,
            errorMessage: t,
            successMessage: i
          }],
          groupElem: r,
          elems: Array.from(a),
          type: l ? "radio" : "checkbox",
          isDirty: !1,
          isValid: void 0,
          config: s
        }, a.forEach(function (c) {
          _this8.setListeners(c);
        }), this;
      }
    }, {
      key: "getListenerType",
      value: function getListenerType(e) {
        switch (e) {
          case "checkbox":
          case "select-one":
          case "file":
          case "radio":
            return "change";

          case "date":
            return "input";

          default:
            return "keyup";
        }
      }
    }, {
      key: "setListeners",
      value: function setListeners(e) {
        var t = this.getListenerType(e.type);
        this.removeListener(t, e, this.handlerChange), this.addListener(t, e, this.handlerChange);
      }
    }, {
      key: "clearErrors",
      value: function clearErrors() {
        var _this9 = this;

        var e, t, s, i, r, a;
        this.errorLabels.forEach(function (l) {
          return l.remove();
        }), this.successLabels.forEach(function (l) {
          return l.remove();
        });

        var _loop2 = function _loop2(l) {
          var o = _this9.fields[l],
              c = ((e = o.config) == null ? void 0 : e.errorFieldStyle) || _this9.globalConfig.errorFieldStyle;
          Object.keys(c).forEach(function (f) {
            o.elem.style[f] = "";
          });
          var h = ((t = o.config) == null ? void 0 : t.successFieldStyle) || _this9.globalConfig.successFieldStyle || {};
          Object.keys(h).forEach(function (f) {
            o.elem.style[f] = "";
          }), o.elem.classList.remove(((s = o.config) == null ? void 0 : s.errorFieldCssClass) || _this9.globalConfig.errorFieldCssClass, ((i = o.config) == null ? void 0 : i.successFieldCssClass) || _this9.globalConfig.successFieldCssClass);
        };

        for (var l in this.fields) {
          _loop2(l);
        }

        var _loop3 = function _loop3(_l5) {
          var o = _this9.groupFields[_l5],
              c = ((r = o.config) == null ? void 0 : r.errorFieldStyle) || _this9.globalConfig.errorFieldStyle;
          Object.keys(c).forEach(function (f) {
            o.elems.forEach(function (m) {
              var v;
              m.style[f] = "", m.classList.remove(((v = o.config) == null ? void 0 : v.errorFieldCssClass) || _this9.globalConfig.errorFieldCssClass);
            });
          });
          var h = ((a = o.config) == null ? void 0 : a.successFieldStyle) || _this9.globalConfig.successFieldStyle || {};
          Object.keys(h).forEach(function (f) {
            o.elems.forEach(function (m) {
              var v;
              m.style[f] = "", m.classList.remove(((v = o.config) == null ? void 0 : v.successFieldCssClass) || _this9.globalConfig.successFieldCssClass);
            });
          });
        };

        for (var _l5 in this.groupFields) {
          _loop3(_l5);
        }

        this.tooltips = [];
      }
    }, {
      key: "isTooltip",
      value: function isTooltip() {
        return !!this.globalConfig.tooltip;
      }
    }, {
      key: "lockForm",
      value: function lockForm() {
        var e = this.form.querySelectorAll("input, textarea, button, select");

        for (var t = 0, s = e.length; t < s; ++t) {
          e[t].setAttribute("disabled", "disabled"), e[t].style.pointerEvents = "none", e[t].style.webkitFilter = "grayscale(100%)", e[t].style.filter = "grayscale(100%)";
        }
      }
    }, {
      key: "unlockForm",
      value: function unlockForm() {
        var e = this.form.querySelectorAll("input, textarea, button, select");

        for (var t = 0, s = e.length; t < s; ++t) {
          e[t].removeAttribute("disabled"), e[t].style.pointerEvents = "", e[t].style.webkitFilter = "", e[t].style.filter = "";
        }
      }
    }, {
      key: "renderTooltip",
      value: function renderTooltip(e, t, s) {
        var _this10 = this;

        var f;

        var _e$getBoundingClientR = e.getBoundingClientRect(),
            i = _e$getBoundingClientR.top,
            r = _e$getBoundingClientR.left,
            a = _e$getBoundingClientR.width,
            l = _e$getBoundingClientR.height,
            o = t.getBoundingClientRect(),
            c = s || ((f = this.globalConfig.tooltip) == null ? void 0 : f.position);

        switch (c) {
          case "left":
            {
              t.style.top = "".concat(i + l / 2 - o.height / 2, "px"), t.style.left = "".concat(r - o.width - C, "px");
              break;
            }

          case "top":
            {
              t.style.top = "".concat(i - o.height - C, "px"), t.style.left = "".concat(r + a / 2 - o.width / 2, "px");
              break;
            }

          case "right":
            {
              t.style.top = "".concat(i + l / 2 - o.height / 2, "px"), t.style.left = "".concat(r + a + C, "px");
              break;
            }

          case "bottom":
            {
              t.style.top = "".concat(i + l + C, "px"), t.style.left = "".concat(r + a / 2 - o.width / 2, "px");
              break;
            }
        }

        return t.dataset.direction = c, {
          refresh: function refresh() {
            _this10.renderTooltip(e, t, s);
          }
        };
      }
    }, {
      key: "createErrorLabelElem",
      value: function createErrorLabelElem(e, t, s) {
        var i = document.createElement("div");
        i.innerHTML = t;
        var r = this.isTooltip() ? s == null ? void 0 : s.errorLabelStyle : (s == null ? void 0 : s.errorLabelStyle) || this.globalConfig.errorLabelStyle;
        return Object.assign(i.style, r), i.classList.add((s == null ? void 0 : s.errorLabelCssClass) || this.globalConfig.errorLabelCssClass, "just-validate-error-label"), this.isTooltip() && (i.dataset.tooltip = "true"), this.globalConfig.testingMode && (i.dataset.testId = "error-label-".concat(e)), this.errorLabels.push(i), i;
      }
    }, {
      key: "createSuccessLabelElem",
      value: function createSuccessLabelElem(e, t, s) {
        if (t === void 0) return null;
        var i = document.createElement("div");
        i.innerHTML = t;
        var r = (s == null ? void 0 : s.successLabelStyle) || this.globalConfig.successLabelStyle;
        return Object.assign(i.style, r), i.classList.add((s == null ? void 0 : s.successLabelCssClass) || this.globalConfig.successLabelCssClass, "just-validate-success-label"), this.globalConfig.testingMode && (i.dataset.testId = "success-label-".concat(e)), this.successLabels.push(i), i;
      }
    }, {
      key: "renderFieldLabel",
      value: function renderFieldLabel(e, t) {
        var s, i, r, a, l, o, c;

        if (e.type === "checkbox" || e.type === "radio") {
          var h = document.querySelector("label[for=\"".concat(e.getAttribute("id"), "\"]"));
          ((i = (s = e.parentElement) == null ? void 0 : s.tagName) == null ? void 0 : i.toLowerCase()) === "label" ? (a = (r = e.parentElement) == null ? void 0 : r.parentElement) == null || a.appendChild(t) : h ? (l = h.parentElement) == null || l.appendChild(t) : (o = e.parentElement) == null || o.appendChild(t);
        } else (c = e.parentElement) == null || c.appendChild(t);
      }
    }, {
      key: "renderErrors",
      value: function renderErrors() {
        var _this11 = this;

        var e, t, s, i, r, a;

        if (!!this.isSubmitted) {
          this.clearErrors(), this.isValid = !0;

          var _loop4 = function _loop4(l) {
            var o = _this11.groupFields[l];

            if (o.isValid) {
              o.elems.forEach(function (f) {
                var m, v;
                Object.assign(f.style, ((m = o.config) == null ? void 0 : m.successFieldStyle) || _this11.globalConfig.successFieldStyle), f.classList.add(((v = o.config) == null ? void 0 : v.successFieldCssClass) || _this11.globalConfig.successFieldCssClass);
              });

              var _h = _this11.createSuccessLabelElem(l, o.successMessage, o.config);

              _h && o.groupElem.appendChild(_h);
              return "continue";
            }

            _this11.isValid = !1, o.elems.forEach(function (h) {
              var f, m;
              Object.assign(h.style, ((f = o.config) == null ? void 0 : f.errorFieldStyle) || _this11.globalConfig.errorFieldStyle), h.classList.add(((m = o.config) == null ? void 0 : m.errorFieldCssClass) || _this11.globalConfig.errorFieldCssClass);
            });

            var c = _this11.createErrorLabelElem(l, o.errorMessage, o.config);

            o.groupElem.appendChild(c), _this11.isTooltip() && _this11.tooltips.push(_this11.renderTooltip(o.groupElem, c, (t = (e = o.config) == null ? void 0 : e.tooltip) == null ? void 0 : t.position));
          };

          for (var l in this.groupFields) {
            var _ret2 = _loop4(l);

            if (_ret2 === "continue") continue;
          }

          for (var _l6 in this.fields) {
            var o = this.fields[_l6];

            if (o.isValid) {
              if (!o.asyncCheckPending) {
                var h = this.createSuccessLabelElem(_l6, o.successMessage, o.config);
                h && this.renderFieldLabel(o.elem, h), o.elem.classList.add(((s = o.config) == null ? void 0 : s.successFieldCssClass) || this.globalConfig.successFieldCssClass);
              }

              continue;
            }

            this.isValid = !1, o.elem.classList.add(((i = o.config) == null ? void 0 : i.errorFieldCssClass) || this.globalConfig.errorFieldCssClass);
            var c = this.createErrorLabelElem(_l6, o.errorMessage, o.config);
            this.renderFieldLabel(o.elem, c), this.isTooltip() && this.tooltips.push(this.renderTooltip(o.elem, c, (a = (r = o.config) == null ? void 0 : r.tooltip) == null ? void 0 : a.position));
          }
        }
      }
    }, {
      key: "destroy",
      value: function destroy() {
        var _this12 = this;

        this.eventListeners.forEach(function (e) {
          _this12.removeListener(e.type, e.elem, e.func);
        }), Object.keys(this.customStyleTags).forEach(function (e) {
          _this12.customStyleTags[e].remove();
        }), this.clearErrors(), this.globalConfig.lockForm && this.unlockForm();
      }
    }, {
      key: "refresh",
      value: function refresh() {
        var _this13 = this;

        this.destroy(), this.form ? (this.initialize(this.form, this.globalConfig), Object.keys(this.fields).forEach(function (e) {
          _this13.addField(e, _toConsumableArray(_this13.fields[e].rules), _this13.fields[e].config);
        })) : console.error("Cannot initialize the library! Form is not defined");
      }
    }, {
      key: "setCurrentLocale",
      value: function setCurrentLocale(e) {
        if (typeof e != "string" && e !== void 0) {
          console.error("Current locale should be a string");
          return;
        }

        this.currentLocale = e, this.isSubmitted && this.validate();
      }
    }, {
      key: "onSuccess",
      value: function onSuccess(e) {
        return this.onSuccessCallback = e, this;
      }
    }, {
      key: "onFail",
      value: function onFail(e) {
        return this.onFailCallback = e, this;
      }
    }]);

    return O;
  }();

  return O;
});