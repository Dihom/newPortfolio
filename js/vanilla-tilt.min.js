"use strict";

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

var VanillaTilt = function () {
  "use strict";

  var t = /*#__PURE__*/function () {
    function t(e) {
      var i = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

      _classCallCheck(this, t);

      if (!(e instanceof Node)) throw "Can't initialize VanillaTilt because " + e + " is not a Node.";
      this.width = null, this.height = null, this.clientWidth = null, this.clientHeight = null, this.left = null, this.top = null, this.gammazero = null, this.betazero = null, this.lastgammazero = null, this.lastbetazero = null, this.transitionTimeout = null, this.updateCall = null, this.event = null, this.updateBind = this.update.bind(this), this.resetBind = this.reset.bind(this), this.element = e, this.settings = this.extendSettings(i), this.reverse = this.settings.reverse ? -1 : 1, this.glare = t.isSettingTrue(this.settings.glare), this.glarePrerender = t.isSettingTrue(this.settings["glare-prerender"]), this.fullPageListening = t.isSettingTrue(this.settings["full-page-listening"]), this.gyroscope = t.isSettingTrue(this.settings.gyroscope), this.gyroscopeSamples = this.settings.gyroscopeSamples, this.elementListener = this.getElementListener(), this.glare && this.prepareGlare(), this.fullPageListening && this.updateClientSize(), this.addEventListeners(), this.reset(), this.updateInitialPosition();
    }

    _createClass(t, [{
      key: "getElementListener",
      value: function getElementListener() {
        if (this.fullPageListening) return window.document;

        if ("string" == typeof this.settings["mouse-event-element"]) {
          var _t13 = document.querySelector(this.settings["mouse-event-element"]);

          if (_t13) return _t13;
        }

        return this.settings["mouse-event-element"] instanceof Node ? this.settings["mouse-event-element"] : this.element;
      }
    }, {
      key: "addEventListeners",
      value: function addEventListeners() {
        this.onMouseEnterBind = this.onMouseEnter.bind(this), this.onMouseMoveBind = this.onMouseMove.bind(this), this.onMouseLeaveBind = this.onMouseLeave.bind(this), this.onWindowResizeBind = this.onWindowResize.bind(this), this.onDeviceOrientationBind = this.onDeviceOrientation.bind(this), this.elementListener.addEventListener("mouseenter", this.onMouseEnterBind), this.elementListener.addEventListener("mouseleave", this.onMouseLeaveBind), this.elementListener.addEventListener("mousemove", this.onMouseMoveBind), (this.glare || this.fullPageListening) && window.addEventListener("resize", this.onWindowResizeBind), this.gyroscope && window.addEventListener("deviceorientation", this.onDeviceOrientationBind);
      }
    }, {
      key: "removeEventListeners",
      value: function removeEventListeners() {
        this.elementListener.removeEventListener("mouseenter", this.onMouseEnterBind), this.elementListener.removeEventListener("mouseleave", this.onMouseLeaveBind), this.elementListener.removeEventListener("mousemove", this.onMouseMoveBind), this.gyroscope && window.removeEventListener("deviceorientation", this.onDeviceOrientationBind), (this.glare || this.fullPageListening) && window.removeEventListener("resize", this.onWindowResizeBind);
      }
    }, {
      key: "destroy",
      value: function destroy() {
        clearTimeout(this.transitionTimeout), null !== this.updateCall && cancelAnimationFrame(this.updateCall), this.reset(), this.removeEventListeners(), this.element.vanillaTilt = null, delete this.element.vanillaTilt, this.element = null;
      }
    }, {
      key: "onDeviceOrientation",
      value: function onDeviceOrientation(_t3) {
        if (null === _t3.gamma || null === _t3.beta) return;
        this.updateElementPosition(), this.gyroscopeSamples > 0 && (this.lastgammazero = this.gammazero, this.lastbetazero = this.betazero, null === this.gammazero ? (this.gammazero = _t3.gamma, this.betazero = _t3.beta) : (this.gammazero = (_t3.gamma + this.lastgammazero) / 2, this.betazero = (_t3.beta + this.lastbetazero) / 2), this.gyroscopeSamples -= 1);
        var e = this.settings.gyroscopeMaxAngleX - this.settings.gyroscopeMinAngleX,
            i = this.settings.gyroscopeMaxAngleY - this.settings.gyroscopeMinAngleY,
            s = e / this.width,
            n = i / this.height,
            l = (_t3.gamma - (this.settings.gyroscopeMinAngleX + this.gammazero)) / s,
            a = (_t3.beta - (this.settings.gyroscopeMinAngleY + this.betazero)) / n;
        null !== this.updateCall && cancelAnimationFrame(this.updateCall), this.event = {
          clientX: l + this.left,
          clientY: a + this.top
        }, this.updateCall = requestAnimationFrame(this.updateBind);
      }
    }, {
      key: "onMouseEnter",
      value: function onMouseEnter() {
        this.updateElementPosition(), this.element.style.willChange = "transform", this.setTransition();
      }
    }, {
      key: "onMouseMove",
      value: function onMouseMove(_t4) {
        null !== this.updateCall && cancelAnimationFrame(this.updateCall), this.event = _t4, this.updateCall = requestAnimationFrame(this.updateBind);
      }
    }, {
      key: "onMouseLeave",
      value: function onMouseLeave() {
        this.setTransition(), this.settings.reset && requestAnimationFrame(this.resetBind);
      }
    }, {
      key: "reset",
      value: function reset() {
        this.event = {
          clientX: this.left + this.width / 2,
          clientY: this.top + this.height / 2
        }, this.element && this.element.style && (this.element.style.transform = "perspective(".concat(this.settings.perspective, "px) ") + "rotateX(0deg) rotateY(0deg) scale3d(1, 1, 1)"), this.resetGlare();
      }
    }, {
      key: "resetGlare",
      value: function resetGlare() {
        this.glare && (this.glareElement.style.transform = "rotate(180deg) translate(-50%, -50%)", this.glareElement.style.opacity = "0");
      }
    }, {
      key: "updateInitialPosition",
      value: function updateInitialPosition() {
        if (0 === this.settings.startX && 0 === this.settings.startY) return;
        this.onMouseEnter(), this.fullPageListening ? this.event = {
          clientX: (this.settings.startX + this.settings.max) / (2 * this.settings.max) * this.clientWidth,
          clientY: (this.settings.startY + this.settings.max) / (2 * this.settings.max) * this.clientHeight
        } : this.event = {
          clientX: this.left + (this.settings.startX + this.settings.max) / (2 * this.settings.max) * this.width,
          clientY: this.top + (this.settings.startY + this.settings.max) / (2 * this.settings.max) * this.height
        };
        var _t5 = this.settings.scale;
        this.settings.scale = 1, this.update(), this.settings.scale = _t5, this.resetGlare();
      }
    }, {
      key: "getValues",
      value: function getValues() {
        var _t6, e;

        return this.fullPageListening ? (_t6 = this.event.clientX / this.clientWidth, e = this.event.clientY / this.clientHeight) : (_t6 = (this.event.clientX - this.left) / this.width, e = (this.event.clientY - this.top) / this.height), _t6 = Math.min(Math.max(_t6, 0), 1), e = Math.min(Math.max(e, 0), 1), {
          tiltX: (this.reverse * (this.settings.max - _t6 * this.settings.max * 2)).toFixed(2),
          tiltY: (this.reverse * (e * this.settings.max * 2 - this.settings.max)).toFixed(2),
          percentageX: 100 * _t6,
          percentageY: 100 * e,
          angle: Math.atan2(this.event.clientX - (this.left + this.width / 2), -(this.event.clientY - (this.top + this.height / 2))) * (180 / Math.PI)
        };
      }
    }, {
      key: "updateElementPosition",
      value: function updateElementPosition() {
        var _t7 = this.element.getBoundingClientRect();

        this.width = this.element.offsetWidth, this.height = this.element.offsetHeight, this.left = _t7.left, this.top = _t7.top;
      }
    }, {
      key: "update",
      value: function update() {
        var _t8 = this.getValues();

        this.element.style.transform = "perspective(" + this.settings.perspective + "px) rotateX(" + ("x" === this.settings.axis ? 0 : _t8.tiltY) + "deg) rotateY(" + ("y" === this.settings.axis ? 0 : _t8.tiltX) + "deg) scale3d(" + this.settings.scale + ", " + this.settings.scale + ", " + this.settings.scale + ")", this.glare && (this.glareElement.style.transform = "rotate(".concat(_t8.angle, "deg) translate(-50%, -50%)"), this.glareElement.style.opacity = "".concat(_t8.percentageY * this.settings["max-glare"] / 100)), this.element.dispatchEvent(new CustomEvent("tiltChange", {
          detail: _t8
        })), this.updateCall = null;
      }
    }, {
      key: "prepareGlare",
      value: function prepareGlare() {
        if (!this.glarePrerender) {
          var _t14 = document.createElement("div");

          _t14.classList.add("js-tilt-glare");

          var e = document.createElement("div");
          e.classList.add("js-tilt-glare-inner"), _t14.appendChild(e), this.element.appendChild(_t14);
        }

        this.glareElementWrapper = this.element.querySelector(".js-tilt-glare"), this.glareElement = this.element.querySelector(".js-tilt-glare-inner"), this.glarePrerender || (Object.assign(this.glareElementWrapper.style, {
          position: "absolute",
          top: "0",
          left: "0",
          width: "100%",
          height: "100%",
          overflow: "hidden",
          "pointer-events": "none"
        }), Object.assign(this.glareElement.style, {
          position: "absolute",
          top: "50%",
          left: "50%",
          "pointer-events": "none",
          "background-image": "linear-gradient(0deg, rgba(255,255,255,0) 0%, rgba(255,255,255,1) 100%)",
          transform: "rotate(180deg) translate(-50%, -50%)",
          "transform-origin": "0% 0%",
          opacity: "0"
        }), this.updateGlareSize());
      }
    }, {
      key: "updateGlareSize",
      value: function updateGlareSize() {
        if (this.glare) {
          var _t15 = 2 * (this.element.offsetWidth > this.element.offsetHeight ? this.element.offsetWidth : this.element.offsetHeight);

          Object.assign(this.glareElement.style, {
            width: "".concat(_t15, "px"),
            height: "".concat(_t15, "px")
          });
        }
      }
    }, {
      key: "updateClientSize",
      value: function updateClientSize() {
        this.clientWidth = window.innerWidth || document.documentElement.clientWidth || document.body.clientWidth, this.clientHeight = window.innerHeight || document.documentElement.clientHeight || document.body.clientHeight;
      }
    }, {
      key: "onWindowResize",
      value: function onWindowResize() {
        this.updateGlareSize(), this.updateClientSize();
      }
    }, {
      key: "setTransition",
      value: function setTransition() {
        var _this = this;

        clearTimeout(this.transitionTimeout), this.element.style.transition = this.settings.speed + "ms " + this.settings.easing, this.glare && (this.glareElement.style.transition = "opacity ".concat(this.settings.speed, "ms ").concat(this.settings.easing)), this.transitionTimeout = setTimeout(function () {
          _this.element.style.transition = "", _this.glare && (_this.glareElement.style.transition = "");
        }, this.settings.speed);
      }
    }, {
      key: "extendSettings",
      value: function extendSettings(_t11) {
        var e = {
          reverse: !1,
          max: 15,
          startX: 0,
          startY: 0,
          perspective: 1e3,
          easing: "cubic-bezier(.03,.98,.52,.99)",
          scale: 1,
          speed: 300,
          transition: !0,
          axis: null,
          glare: !1,
          "max-glare": 1,
          "glare-prerender": !1,
          "full-page-listening": !1,
          "mouse-event-element": null,
          reset: !0,
          gyroscope: !0,
          gyroscopeMinAngleX: -45,
          gyroscopeMaxAngleX: 45,
          gyroscopeMinAngleY: -45,
          gyroscopeMaxAngleY: 45,
          gyroscopeSamples: 10
        },
            i = {};

        for (var s in e) {
          if (s in _t11) i[s] = _t11[s];else if (this.element.hasAttribute("data-tilt-" + s)) {
            var _t16 = this.element.getAttribute("data-tilt-" + s);

            try {
              i[s] = JSON.parse(_t16);
            } catch (e) {
              i[s] = _t16;
            }
          } else i[s] = e[s];
        }

        return i;
      }
    }], [{
      key: "isSettingTrue",
      value: function isSettingTrue(_t) {
        return "" === _t || !0 === _t || 1 === _t;
      }
    }, {
      key: "init",
      value: function init(e, i) {
        e instanceof Node && (e = [e]), e instanceof NodeList && (e = [].slice.call(e)), e instanceof Array && e.forEach(function (e) {
          "vanillaTilt" in e || (e.vanillaTilt = new t(e, i));
        });
      }
    }]);

    return t;
  }();

  return "undefined" != typeof document && (window.VanillaTilt = t, t.init(document.querySelectorAll("[data-tilt]"))), t;
}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,